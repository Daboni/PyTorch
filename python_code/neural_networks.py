# -*- coding: utf-8 -*-
"""Neural_Networks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Mrmew4cCnk9ON3XQi-ll4qJEtk4nx5x
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class Net(nn.Module):

  def __init__(self):
    super(Net, self).__init__()
    #입력 이미지 채널 1개, 출력 채널 6개, 3X3의 정사각 컨볼루션 행렬
    #컨볼루션 커널 정의
    self.conv1 = nn.Conv2d(1,6,3)
    self.conv2 = nn.Conv2d(6,16,3)
    #아핀 (affine) 연산 : y = Wx + b
    self.fc1 = nn.Linear(16*6*6, 120) #6*6은 이미지 차원
    self.fc2 = nn.Linear(120,84)
    self.fc3 = nn.Linear(84,10)

  
  def forward(self,x):
    #(2,2) 크기의 윈도우에 대해 맥스 풀링(max pooling)
    x = F.max_pool2d(F.relu(self.conv1(x)),(2,2))
    #크기가 제곱수라면 하나의 숫자만을 특정
    x = F.max_pool2d(F.relu(self.conv2(x)),2)
    x= x.view(-1,self.num_flat_feature(x))
    x= F.relu(self.fc1(x))
    x= F.relu(self.fc2(x))
    x= self.fc3(x)
    return x
  
  def num_flat_feature(self,x):
    size = x.size()[1:] # 배치 차원을 제외한 모든 차원
    num_features = 1
    for s in size:
      num_features *= s
    return num_features

net = Net()
print(net)

"""모델의 학습 가능한 매개변수들은 net.parameters()에 의해 반환"""

params = list(net.parameters())
print(len(params))
print(params[0].size())

print(params[1].size())

input  = torch.randn(1,1,32,32)
out = net(input)
print(out)

net.zero_grad()
out.backward(torch.randn(1,10))



"""손실 함수(Loss Function)"""

output = net(input)
target = torch.randn(10)
target = target.view(1,-1)
criterion = nn.MSELoss() #평균제곱오차

loss = criterion(output,target)

print(loss)

target = torch.randn(10)
print(target)
target = target.view(1,-1)
print(target)

"""역전파(Backpropagation)

변화도 누적을 피하기 위해 변화도 버퍼를 수동으로 0으로 설정이 필요
"""

net.zero_grad() #모든 매개변수의 변화도를 0으로 초기화

print('conv1.bias.grad before backward')
print(net.conv1.bias.grad)

loss.backward()

print('conv1.bias.grad after backward')
print(net.conv1.bias.grad)

"""가중치 갱신

확률적 경사 하강법(SGD;Stochaastic Grdient Descent) : 새로운 가중치 = 가중치 - 학습률 * 변화도
"""

learning_rate = 0.01
for f in net.parameters():
  f.data.sub_(f.grad.data*learning_rate)


import torch.optim as optim

optimizer = optim.SGD(net.parameters(), lr = 0.01)

optimizer.zero_grad()
ouput = net(input)
loss = criterion(output, target)
loss.backward()
optimizer.step()

print(loss.grad_fn.next_functions[0][0].next_functions[0][0])

